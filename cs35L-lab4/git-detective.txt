git log --grep="merge-tree" --grep="segfault" --until="2022-12-12"

--grep helps us find WHERE the specified pattern is within our commits.
NOTE: We did not use -S because -S is to see the commits WHEN the string we give it 
      was added or removed from a line of code.

1) I used this command to try to find when the message "In read-only repositories, 
   "git merge-tree" tried to come up with a merge result tree object, which it failed 
   (which is not wrong) and led to a segfault (which is bad), which has been corrected.‚Äù 
   appears. By finding this message, I can then trace the commits after to see where the 
   code changes to fix this mistake. 

After using git log --grep="merge-tree" --grep="segfault" --until="2022-12-12", we found the 
following message under this commitID:

      commit bcf22f29df87f25582de0ac9274d1567fa16be6f
      Merge: 7f8a6caee5 92481d1b26
      Author: Junio C Hamano <gitster@pobox.com>
      Date:   Tue Oct 25 17:11:34 2022 -0700

      Merge branch 'js/merge-ort-in-read-only-repo' into maint-2.38
    
      In read-only repositories, "git merge-tree" tried to come up with a
      merge result tree object, which it failed (which is not wrong) and
      led to a segfault (which is bad), which has been corrected.
    
    * js/merge-ort-in-read-only-repo:
      merge-ort: return early when failing to write a blob
      merge-ort: fix segmentation fault in read-only repositories

2) To guide my next steps, I notices how we have two messages within this commit:

   merge-ort: return early when failing to write a blob
   merge-ort: fix segmentation fault in read-only repositories

   The first message tell us that we got a segmentation fault when merging and writing to a blob.
   The second message tells us that we were able to fix it. 

   Thus, I first used the command 
   git log --grep "return early when failing to write a blob" to see the commits associated with 
   the segmentation fault occuring. 

   After running this command, the following commitID stood out:

   commit 92481d1b26ab57525f5efe01d01c7a3d337b8df7
   Author: Johannes Schindelin <Johannes.Schindelin@gmx.de>
   Date:   Wed Sep 28 07:29:22 2022 +0000

   This commitID stood out because the commit message mentions that the previous xommit before
   this one fixes the segmentation fault. Moreover, it describes the errors that occurs when trying 
   to write a blob object before creating a new tree object. We need a blob to create a new tree object. 

   Thus, to get the previous commit, I did the following command: 

   git log 92481d1b26ab57525f5efe01d01c7a3d337b8df7^1 -n 1

   This tells us we want the commit before 92481d1b26ab57525f5efe01d01c7a3d337b8df7 and to only show
   us one commit. The following is the output and fixes the segmentation fault:

   commit 0b55d930a69692c7f4e7b90e35fa41f6c46df4bc
   Author: Johannes Schindelin <Johannes.Schindelin@gmx.de>
   Date:   Wed Sep 28 07:29:21 2022 +0000

   The goal was to make the operation fail or to not continue if blob/tree objects cannot be written
   to prevent the segemntation fault. Thus, the changes that made this happened was when we stopped ignoring the return value of `write_object_file()` 
   and `write_tree()` and set `clean = -1` in the error case.

