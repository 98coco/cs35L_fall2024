   
//PRESSING ON EMPTY BOX AFTER 3 MOVES WITHOUT FITST click???

    // if (xIsNext) {
    //   if (xCount == 3){
    //     if (nextSquares[4]=="X"){ //check to see if middle
    //       //win or vacate
    //     } 
    //     else{ // if not then click on the piece you want to move and the destination and move it there
    //       nextSquares[i] = null //vacate the current space --> assuming they clicked on this space to move  

    //       //choose next spot to move to --> check if the spots around is vacant using a helper function (??EDGE CASES??)
    //       //if there is something there already return early

    //       //calling handleclick again on the new position but that doesnt make sense???
    //       // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />
    //     }  
    //   }
    //   else{ //has not reached 3 Xs
    //     nextSquares[i] = "X"
    //     setXCount(xCount + 1) 
    //   }
    // } else { //O's turn 
    //   if (oCount == 3){
    //     if (nextSquares[4]=="O"){ //check to see if middle
    //       //win or vacate
    //     } 
    //     else{ // if not then click on the piece you want to move and the destination and move it there
    //       nextSquares[i] = null //vacate the current space 
    //       //choose next spot to move to 
    //       // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />
    //     } 
    //   }
    //   else{ //has not reached 3 Os
    //       nextSquares[i] = "O"
    //       setOCount(oCount +1)
    //   }
    // }



//Tic-Tac-Toe
// import { useState } from 'react';

// function Square({value ,onSquareClick}) {
//   return <button className="square" onClick = {onSquareClick}>{value}</button>;
// }

// export default function Board() {
//   const [xIsNext, setXIsNext] = useState(true);
//   const [squares, setSquares] = useState(Array(9).fill(null));

//   function handleClick(i) {
//     if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square 
//       return;
//     }

//     const nextSquares = squares.slice();

//     if (xIsNext) {
//       nextSquares[i] = "X";
//     } else {
//       nextSquares[i] = "O";
//     }
//     setSquares(nextSquares);
//     setXIsNext(!xIsNext);
//   }

//   const winner = calculateWinner(squares);
//   let status;
//   if (winner) {
//     status = "Winner: " + winner;
//   } else {
//     status = "Next player: " + (xIsNext ? "X" : "O"); //if xIsNext , next player is X, else it is O
//   }

//   return (
//     <>
//       <div className="status">{status}</div>
//       <div className="board-row">
//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
//       </div>
//       <div className="board-row">
//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
//       </div>
//       <div className="board-row">
//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
//       </div>
//     </>
//   );
// }

// function calculateWinner (squares) {
//   const lines = [
//     [0, 1, 2],  //top row
//     [3, 4, 5],  //middle row
//     [6, 7, 8],  //bottom row
//     [0, 3, 6],  //left column
//     [1, 4, 7],  //middle column
//     [2, 5, 8],  //right column
//     [0, 4, 8],  //diagonal (top-left to bottom-right)
//     [2, 4, 6]   //diagonal (top-right to bottom-left)
//   ]; //refers to the possibilities of where a winner can win

//   for (let i = 0; i < lines.length; i++) {
//     const [a, b, c] = lines[i];
//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
//       return squares[a];
//     }
//   }
//   return null;
// }




