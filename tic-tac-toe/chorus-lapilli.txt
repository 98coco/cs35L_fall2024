Chrous lapilli is a more complex version of tic-tac-toe, thus I built upon
the tic-tac-toe tutorial we were required to follow.

1) Within the board functionality, I created a tracker to keep a count of how many pieces each
   player had on the board. 

  let xCount = 0;
  let oCount = 0;
  for (let i = 0; i< squares.length; i++){ //helps check to make sure only 3 pieces are on the board 
    if (squares[i] == "X"){
      xCount++
    }
    else if (squares[i] == "O"){
      oCount++
    }
  }

  --> this makes sure that each player does not add more than 3 pieces 

2) Within the handleClick function, I first changed "if (calculateWinner(squares) || squares[i]) {return}" to "if (calculateWinner(squares)) {return}}"

   Doing so allows for the code to just return early if there is a winner. 

3) My general outline of the handleClick function is as follows:

    a) Copy squares of current render into nextSquares
    b) A conditional statement that takes into account X's move when there are 3 X pieces on the board
    c) A conditional statement that takes into account O's move when there are 3 X pieces on the board
    d) A conditional state that takes into account if a player presses on a piece that is not theirs
    e) The tic-tac-toe implementation of the players placing pieces on the board and them switching off turns 

    I laid out my code in this way because b and c would return early, thus it will not add more pieces to the board
    once I hit 3 moves.If I had point e before points b,c, and d it would have added more pieces than I would have wanted. Additionally,  
    I need d before e in the case that a players pressed on pieces that were not theirs when we have not reached 3 moves. 
    Same logic as why we had "if (calculateWinner(squares) || squares[i]) {return}" at the beginning of the tic-tac-toe game

4) The code below demonstrates what b and c does: 

    if (xIsNext && xCount === 3){
      if(squares[i] === "X"){
        setMovePiece(i) //first click, log this index
      }
      else if (isValidMove(movePiece,i,nextSquares,"X")){ //second click valid
        nextSquares[movePiece] = null
        nextSquares[i] = "X"
        setSquares(nextSquares)
        setMovePiece(null)
        setXIsNext(!xIsNext)
        return;
      }
      return 
    }
    
    if (!xIsNext && oCount === 3){
      if(squares[i] === "O"){
        setMovePiece(i) //first click, log this index
      }
      else if (isValidMove(movePiece,i,nextSquares,"O")){ //second click valid
        console.log('inside isvalid move');
        nextSquares[movePiece] = null
        nextSquares[i] = "O"
        setSquares(nextSquares)
        setMovePiece(null)
        setXIsNext(!xIsNext)
        return;
      }
      return 
    }

    In order to enter these conditional statements for whoever's turn it is, it had to be their turn and they had to
    have three pieces on the board already. This is to ensure that once there are 3 pieces from each player, we can do 
    the first and second click process that the game intends to have after the 7th move. 

    Within each players conditional state (aka their turn), there are two conditionals: the first accounting for their first click
    and the second accounting for their second click:
    
        * To know whether it is their first or second click, I created another state variable in the outer board function that activatees 
          when its the players first click (initially, movePiece = null). If it is the person's second click the movePiece is no longer null.
          Rather it contains the index of the piece they want to move. Thus, this allows to go into the second conditional statement. 
    
        * A player can only go into the second conditional statement if the function isValidMove returns true. Moreover, the paramenters
        this function takes in are movePiece, i, nextSquares, and "O". Witin this function, movePiece and i had to be numbers. Thus, if movePiece
        was null, this conditional statement would not be entered. This means that the move is either the players first move or an invalid move. 
        If it was the prior it would setMovePiece and then return, whereas if it was the latter it would just return and then the program rerenders
        for the next action.

    As mentioned before, the second condtional statement for each player after 3 moves calls the isValidMove function. This function essentially 
    checks whether the player has made a valid move. It takes in 4 parameters: currIndex, moveIndex, squares, and player.

        function isValidMove (currIndex,moveIndex,squares,player){ //checks to see if the second move is a valid move --> call this function on the second click
            const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list 
                0:[1,3,4],
                1:[0,2,3,4,5],
                2:[1,4,5],
                3:[0,1,4,6,7],
                4:[0,1,2,3,5,6,7,8],
                5:[1,2,4,7,8],
                6:[3,4,7],
                7:[3,4,5,6,8],
                8:[4,5,7]
            }; 
            let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index

            if (check && squares[4] == player && currIndex !== 4){ //player occupies the center 
                squares[currIndex] = null
                squares[moveIndex] = player
                return calculateWinner(squares);
            }

            if (check && squares[moveIndex] == null){
                return true
            }
            else{
                return false
            }
        }

    This checks whether the move that a player wants to go to is possible/adjacent to their current piece. We can check this by creating a data structure that contains 
    all the possible moves from a current index. Then I created a boolean value that states whether or not the move is valid given the data structure above. 

    I also incorporated the functionality of if a player is in the center spot, they should win or vacate. I incorporated this functionality here because, it accounts
    for the move a player has to consider/make. If the player can make a valid move given their input, is in the center piece, and its current index is not 4, the program
    will "predict" their move using the calculateWinner function we had from the tic-tac-toe game. If they can win given these pieces, then the function returns true and 
    allows the move to proceed within each players turn. Otherwise the function returns early and requires the player to vacate and choose another spot. 

    If the player does not have a piece in the center, then the function would either return true or false depending if the spot they want to go to is available and 
    adjacent to them. 

    If the move is valid, we continue with the functionality of the second click. If not the player has to redo their turn. Since we already have an index of the first 
    click (the piece we want to move) in our state variable movePiece, I would change make that piece "disappear" by setting that spot in our board to null. I then would
    place the players piece on the box they want their move on by setting that index to contain that players piece ("X" or "O"). 

    I would then set our current board to nextSquares, switch the players turn, and return, so that our current board reflects these changes. 

5) The rest of the handleClick contains the same functionality as the tic-tac-toe game. As stated above, this part is only reached if we do not have 3 pieces from each player 
   on the board. This is because chorus-lapilli is exactly like tic-tac-toe until these conditions are met. 


6) To summarize, the new changes are as follows:
    * new state variable witin board function
    * counting the pieces each player has on a board
    * conditional statements that deal with first and second click for each player wants they have 3 pieces on the board
    * helper function called isValidMove to see if players can move to their desired location
