{"ast":null,"code":"var _jsxFileName = \"/Users/cocoli/Desktop/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n//Chorus Lapilli\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nexport default function Board() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n  const [oCount, setOCount] = useState(0); //need to create states because the variables \n\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) {\n      //returns early if there is something on that square or there is a winner\n      return;\n    }\n    const nextSquares = squares.slice(); //copy of actuals squares array\n\n    for (let l = 0; l < nextSquares.length; l++) {\n      //check to see if there is already 3 of Xs and Os on the board \n      if (nextSquares[l] == \"X\") {\n        if (xCount >= 3) {\n          break;\n        } else {\n          setXCount(xCount + 1); //increment for this X turn \n        }\n      } else {\n        if (oCount >= 3) {\n          break;\n        } else {\n          setOCount(oCount + 1); //increment for this O turn \n        }\n      }\n    }\n    if (xIsNext) {\n      if (xCount = 3) {\n        if (nextSquares[4] == \"X\") {//check to see if middle\n          //win or vacate\n        } else {\n          // if not then click on the piece you want to move and the destination and move it there\n          nextSquares[i] = null; //vacate the current space --> assuming they clicked on this space to move  \n\n          //choose next spot to move to --> check if the spots around is vacant using a helper function\n          //if there is something there already return early\n\n          // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />\n        }\n      } else {\n        //has not reached 3 Xs\n        nextSquares[i] = \"X\";\n      }\n    } else {\n      //Y's turn \n      if (oCount = 3) {\n        if (nextSquares[4] == \"O\") {//check to see if middle\n          //win or vacate\n        } else {\n          // if not then click on the piece you want to move and the destination and move it there\n          nextSquares[i] = null; //vacate the current space \n          //choose next spot to move to \n          // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />\n        }\n      } else {\n        //has not reached 3 Os\n        nextSquares[i] = \"O\";\n      }\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  } //end of handleClick\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"MU7WbsQ0JVFZIwK2DD2MbyKkays=\");\n_c2 = Board;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2],\n  //top row\n  [3, 4, 5],\n  //middle row\n  [6, 7, 8],\n  //bottom row\n  [0, 3, 6],\n  //left column\n  [1, 4, 7],\n  //middle column\n  [2, 5, 8],\n  //right column\n  [0, 4, 8],\n  //diagonal (top-left to bottom-right)\n  [2, 4, 6] //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n//Tic-Tac-Toe\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n\n//   function handleClick(i) {\n//     if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//       return;\n//     }\n\n//     const nextSquares = squares.slice();\n\n//     if (xIsNext) {\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n//     setSquares(nextSquares);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","xCount","setXCount","oCount","setOCount","handleClick","i","calculateWinner","nextSquares","slice","l","length","winner","status","_c2","lines","a","b","c","$RefreshReg$"],"sources":["/Users/cocoli/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["//Chorus Lapilli\n\nimport { useState } from 'react';\n\nfunction Square({value ,onSquareClick}) {\n  return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n  const [oCount, setOCount] = useState(0); //need to create states because the variables \n\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square or there is a winner\n      return;\n    }\n\n    const nextSquares = squares.slice(); //copy of actuals squares array\n\n    for (let l =0; l < nextSquares.length; l++){  //check to see if there is already 3 of Xs and Os on the board \n      if (nextSquares[l] == \"X\"){\n        if(xCount >= 3){\n          break\n        }\n        else{\n          setXCount(xCount + 1) //increment for this X turn \n        }\n      }\n      else{\n        if(oCount >= 3){\n          break\n        }\n        else{\n          setOCount(oCount + 1) //increment for this O turn \n        }\n      }\n    }\n\n    if (xIsNext) {\n      if (xCount = 3){\n        if (nextSquares[4]==\"X\"){ //check to see if middle\n          //win or vacate\n        } \n        else{ // if not then click on the piece you want to move and the destination and move it there\n          nextSquares[i] = null //vacate the current space --> assuming they clicked on this space to move  \n\n          //choose next spot to move to --> check if the spots around is vacant using a helper function\n          //if there is something there already return early\n\n          // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />\n        }  \n      }\n      else{ //has not reached 3 Xs\n        nextSquares[i] = \"X\";\n      }\n    } else { //Y's turn \n      if (oCount = 3){\n        if (nextSquares[4]==\"O\"){ //check to see if middle\n          //win or vacate\n        } \n        else{ // if not then click on the piece you want to move and the destination and move it there\n          nextSquares[i] = null //vacate the current space \n          //choose next spot to move to \n          // return <Square value={squares[i]} onSquareClick={() => handleClick(i)} />\n        } \n      }\n      else{ //has not reached 3 Os\n          nextSquares[i] = \"O\";\n      }\n    }\n\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  } //end of handleClick\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction calculateWinner (squares) {\n  const lines = [\n    [0, 1, 2],  //top row\n    [3, 4, 5],  //middle row\n    [6, 7, 8],  //bottom row\n    [0, 3, 6],  //left column\n    [1, 4, 7],  //middle column\n    [2, 5, 8],  //right column\n    [0, 4, 8],  //diagonal (top-left to bottom-right)\n    [2, 4, 6]   //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n//Tic-Tac-Toe\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n\n//   function handleClick(i) {\n//     if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//       return;\n//     }\n\n//     const nextSquares = squares.slice();\n\n//     if (xIsNext) {\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n//     setSquares(nextSquares);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}