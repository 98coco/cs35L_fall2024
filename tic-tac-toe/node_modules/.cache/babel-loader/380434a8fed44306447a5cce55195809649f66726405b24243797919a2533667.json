{"ast":null,"code":"var _jsxFileName = \"/Users/cocoli/Desktop/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n// Chorus Lapilli\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nexport default function Board() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [count, setCount] = useState(0); //counts up to 6\n  const [indexTrack, setIndexTrack] = useState(0);\n  const [moveSec, setMoveSec] = useState(null);\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) {\n      //returns early if there is something on that square \n      setIndexTrack(i); //to consider the first click\n      setMoveSec(true); //activated the second click\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      if (count >= 6) {\n        if (isValidMove(indexTrack, i, nextSquares)) {\n          nextSquares[i] = \"X\";\n        } else {\n          //not a valid move --> choose a diff location\n          return;\n        }\n      }\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setCount(count + 1);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"VYzzmOx4k9Vkvr1heBvpIe3dh1M=\");\n_c2 = Board;\nfunction isValidMove(currIndex, moveIndex, squares) {\n  //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves = {\n    // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0: [1, 3, 4],\n    1: [0, 2, 3, 4, 5],\n    2: [1, 4, 5],\n    3: [0, 1, 4, 6, 7],\n    4: [0, 1, 2, 3, 5, 6, 7, 8],\n    5: [1, 2, 4, 7, 8],\n    6: [3, 4, 7],\n    7: [3, 4, 5, 6, 8],\n    8: [4, 5, 7]\n  };\n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  if (check) {\n    //check to see if the moveIndex is available \n    if (squares[moveIndex] == null) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    //return false because the square they chose is not valid \n    return false;\n  }\n}\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2],\n  //top row\n  [3, 4, 5],\n  //middle row\n  [6, 7, 8],\n  //bottom row\n  [0, 3, 6],\n  //left column\n  [1, 4, 7],\n  //middle column\n  [2, 5, 8],\n  //right column\n  [0, 4, 8],\n  //diagonal (top-left to bottom-right)\n  [2, 4, 6] //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// Chorus Lapilli\n\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n//   const [xFirst, setXFirst] = useState(0);\n//   const [oFirst, setOFirst] = useState(0);\n//   const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n//   const [oCount, setOCount] = useState(0); //need to create states because the variables \n//   const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n//   const [cent,setCent] = useState(null); //if can't win this helps with making the person move from the center\n//   // const [oCent,setOCent] = useState(null); //if can't win this helps with making the person move from the center\n//   const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n//   const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n//   //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n//   function handleClick(i) {\n\n//     // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//     //   return;\n//     // }\n\n//     if (calculateWinner(squares)) { //returns early if there is something on that square \n//         return;\n//     }\n\n//     const nextSquares = squares.slice(); //copy of actuals squares array\n\n//     if (xIsNext) { //x's turn\n//       if (xFirst === 3 && xCount == 3 && moveSecond == null){ //on first move\n//         if (nextSquares[4] == \"X\"){\n//           // setprevXIndex(4)\n//           setMoveSecond(true)\n//           setXCount(2)\n//         }\n//         else{\n//           setprevXIndex(i)\n//           setMoveSecond(true)\n//           setXCount(2) //only 2 pieces now\n//           console.log(\"first move, xcount:\", xCount)\n//         }\n//       }\n//       else if(xFirst === 3 && xCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevXIndex,i,squares) //check to see if the second move is valid\n//           // if (centerSpot(prevXIndex,squares)){  //can win the center spot\n//           //   nextSquares[i] = \"X\" //marking new location\n//           //   setSquares(nextSquares) //set to the new board\n//           //   setXCount(3) //3 pieces again\n//           //   setMoveSecond(null)\n//           //   console.log(\"second move but center, xcount:\", xCount)\n//           // }\n\n//           if(nextSquares[4] == \"X\"){\n//             nextSquares[i] == \"X\"\n//             if(calculateWinner(nextSquares)){\n//               setSquares(nextSquares)\n//               setXIsNext(!xIsNext)\n//               console.log(\"I Just Won as X\")\n//             }\n//             else{\n//               setCent(true) //move the center piece \n//               setXCount(3)\n//               setMoveSecond(null)\n//             }\n//           }\n\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevXIndex] = null //reset the previous position \n//             nextSquares[i] = \"X\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setXCount(3) //3 pieces again\n//             console.log(\"second move, xcount:\", xCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Xs --> only handle one click\n//         if (xFirst == 2){ //reached the third try\n//           console.log (\"JUST SET X COUNT!\", xCount)\n//           setXCount(3)\n//         }\n//         nextSquares[i] = \"X\"\n//         setXFirst(xFirst + 1) \n//         console.log(\"Before xFirst\", xFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     } else { //O's turn \n\n//       if (oFirst === 3 && oCount == 3 && moveSecond == null){ //on first move\n//         setprevOIndex(i)\n//         setMoveSecond(true)\n//         setOCount(2)\n//         console.log(\"first move, ocount:\", oCount)\n//       }\n//       else if(oFirst === 3 && oCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevOIndex,i,squares) //check to see if the second move is valid\n//           if (centerSpot(prevOIndex,squares)){  //can win the center spot\n//             nextSquares[i] = \"O\" //marking new location\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             setMoveSecond(null)\n//             console.log(\"second move but center, ocount:\", oCount)\n//           }\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevOIndex] = null //reset the previous position \n//             nextSquares[i] = \"O\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             console.log(\"second move ocount:\", oCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Os --> only handle one click\n//         if (oFirst == 2){ //reached the third try\n//           setOCount(3)\n//           console.log (\"JUST SET oCOUNT!\", oCount)\n//         }\n//         nextSquares[i] = \"O\"\n//         setOFirst(oFirst + 1) \n//         console.log(\"Before oFirst\", oFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     }\n//   } //end of handleClick\n\n//   const winner = calculateWinner(squares); \n//   let status; \n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } \n//   else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n//   const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n//     0:[1,3,4],\n//     1:[0,2,3,4,5],\n//     2:[1,4,5],\n//     3:[0,1,4,6,7],\n//     4:[0,1,2,3,5,6,7,8],\n//     5:[1,2,4,7,8],\n//     6:[3,4,7],\n//     7:[3,4,5,6,8],\n//     8:[4,5,7]\n//   }; \n//   let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n//   if (check){ //check to see if the moveIndex is available \n//     if (squares[moveIndex] == null){\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   else{ //return false because the square they chose is not valid \n//     return false\n//   }\n// }\n\n// function centerSpot (squares) {\n//   const centerWin = [\n//     [3, 4, 5],  // middle row\n//     [1, 4, 7],  // middle column\n//     [0, 4, 8],  // diagonal (top-left to bottom-right)\n//     [2, 4, 6]   // diagonal (top-right to bottom-left)\n//   ];\n\n//   for (let j = 0; j < centerWin.length; j++) {\n//     const [a, b, c] = centerWin[j];\n\n//     // Check if there's a possible winning combination with the center piece\n//     if (squares[b] === \"X\") { // If center is occupied by \"X\"\n//       if (squares[a] === \"X\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"X\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     } else if (squares[b] === \"O\") { // If center is occupied by \"O\"\n//       if (squares[a] === \"O\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"O\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     }\n//   }\n//   return false; \n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //checks is all Xs or all Os\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","count","setCount","indexTrack","setIndexTrack","moveSec","setMoveSec","handleClick","i","calculateWinner","nextSquares","slice","isValidMove","winner","status","_c2","currIndex","moveIndex","possibleMoves","check","includes","lines","length","a","b","c","$RefreshReg$"],"sources":["/Users/cocoli/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["// Chorus Lapilli\n\nimport { useState } from 'react';\n\nfunction Square({value ,onSquareClick}) {\n  return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [count,setCount] = useState(0); //counts up to 6\n  const [indexTrack,setIndexTrack] = useState(0);\n  const [moveSec,setMoveSec] = useState(null); \n\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n      setIndexTrack(i) //to consider the first click\n      setMoveSec(true) //activated the second click\n      return;\n    }\n\n    const nextSquares = squares.slice();\n\n    if (xIsNext) {\n      if(count >= 6){\n        \n        if (isValidMove(indexTrack,i,nextSquares)){\n          nextSquares[i] = \"X\";\n        }\n        else{ //not a valid move --> choose a diff location\n          return\n        }\n\n      }\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    setCount(count + 1)\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0:[1,3,4],\n    1:[0,2,3,4,5],\n    2:[1,4,5],\n    3:[0,1,4,6,7],\n    4:[0,1,2,3,5,6,7,8],\n    5:[1,2,4,7,8],\n    6:[3,4,7],\n    7:[3,4,5,6,8],\n    8:[4,5,7]\n  }; \n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  if (check){ //check to see if the moveIndex is available \n    if (squares[moveIndex] == null){\n      return true\n    }\n    else{\n      return false\n    }\n  }\n  else{ //return false because the square they chose is not valid \n    return false\n  }\n}\n\nfunction calculateWinner (squares) {\n  const lines = [\n    [0, 1, 2],  //top row\n    [3, 4, 5],  //middle row\n    [6, 7, 8],  //bottom row\n    [0, 3, 6],  //left column\n    [1, 4, 7],  //middle column\n    [2, 5, 8],  //right column\n    [0, 4, 8],  //diagonal (top-left to bottom-right)\n    [2, 4, 6]   //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n// Chorus Lapilli\n\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n//   const [xFirst, setXFirst] = useState(0);\n//   const [oFirst, setOFirst] = useState(0);\n//   const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n//   const [oCount, setOCount] = useState(0); //need to create states because the variables \n//   const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n//   const [cent,setCent] = useState(null); //if can't win this helps with making the person move from the center\n//   // const [oCent,setOCent] = useState(null); //if can't win this helps with making the person move from the center\n//   const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n//   const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n//   //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n//   function handleClick(i) {\n\n//     // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//     //   return;\n//     // }\n\n//     if (calculateWinner(squares)) { //returns early if there is something on that square \n//         return;\n//     }\n\n//     const nextSquares = squares.slice(); //copy of actuals squares array\n\n//     if (xIsNext) { //x's turn\n//       if (xFirst === 3 && xCount == 3 && moveSecond == null){ //on first move\n//         if (nextSquares[4] == \"X\"){\n//           // setprevXIndex(4)\n//           setMoveSecond(true)\n//           setXCount(2)\n//         }\n//         else{\n//           setprevXIndex(i)\n//           setMoveSecond(true)\n//           setXCount(2) //only 2 pieces now\n//           console.log(\"first move, xcount:\", xCount)\n//         }\n//       }\n//       else if(xFirst === 3 && xCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevXIndex,i,squares) //check to see if the second move is valid\n//           // if (centerSpot(prevXIndex,squares)){  //can win the center spot\n//           //   nextSquares[i] = \"X\" //marking new location\n//           //   setSquares(nextSquares) //set to the new board\n//           //   setXCount(3) //3 pieces again\n//           //   setMoveSecond(null)\n//           //   console.log(\"second move but center, xcount:\", xCount)\n//           // }\n\n//           if(nextSquares[4] == \"X\"){\n//             nextSquares[i] == \"X\"\n//             if(calculateWinner(nextSquares)){\n//               setSquares(nextSquares)\n//               setXIsNext(!xIsNext)\n//               console.log(\"I Just Won as X\")\n//             }\n//             else{\n//               setCent(true) //move the center piece \n//               setXCount(3)\n//               setMoveSecond(null)\n//             }\n//           }\n\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevXIndex] = null //reset the previous position \n//             nextSquares[i] = \"X\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setXCount(3) //3 pieces again\n//             console.log(\"second move, xcount:\", xCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Xs --> only handle one click\n//         if (xFirst == 2){ //reached the third try\n//           console.log (\"JUST SET X COUNT!\", xCount)\n//           setXCount(3)\n//         }\n//         nextSquares[i] = \"X\"\n//         setXFirst(xFirst + 1) \n//         console.log(\"Before xFirst\", xFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     } else { //O's turn \n\n//       if (oFirst === 3 && oCount == 3 && moveSecond == null){ //on first move\n//         setprevOIndex(i)\n//         setMoveSecond(true)\n//         setOCount(2)\n//         console.log(\"first move, ocount:\", oCount)\n//       }\n//       else if(oFirst === 3 && oCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevOIndex,i,squares) //check to see if the second move is valid\n//           if (centerSpot(prevOIndex,squares)){  //can win the center spot\n//             nextSquares[i] = \"O\" //marking new location\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             setMoveSecond(null)\n//             console.log(\"second move but center, ocount:\", oCount)\n//           }\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevOIndex] = null //reset the previous position \n//             nextSquares[i] = \"O\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             console.log(\"second move ocount:\", oCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Os --> only handle one click\n//         if (oFirst == 2){ //reached the third try\n//           setOCount(3)\n//           console.log (\"JUST SET oCOUNT!\", oCount)\n//         }\n//         nextSquares[i] = \"O\"\n//         setOFirst(oFirst + 1) \n//         console.log(\"Before oFirst\", oFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     }\n//   } //end of handleClick\n\n//   const winner = calculateWinner(squares); \n//   let status; \n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } \n//   else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n//   const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n//     0:[1,3,4],\n//     1:[0,2,3,4,5],\n//     2:[1,4,5],\n//     3:[0,1,4,6,7],\n//     4:[0,1,2,3,5,6,7,8],\n//     5:[1,2,4,7,8],\n//     6:[3,4,7],\n//     7:[3,4,5,6,8],\n//     8:[4,5,7]\n//   }; \n//   let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n//   if (check){ //check to see if the moveIndex is available \n//     if (squares[moveIndex] == null){\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   else{ //return false because the square they chose is not valid \n//     return false\n//   }\n// }\n\n// function centerSpot (squares) {\n//   const centerWin = [\n//     [3, 4, 5],  // middle row\n//     [1, 4, 7],  // middle column\n//     [0, 4, 8],  // diagonal (top-left to bottom-right)\n//     [2, 4, 6]   // diagonal (top-right to bottom-left)\n//   ];\n\n//   for (let j = 0; j < centerWin.length; j++) {\n//     const [a, b, c] = centerWin[j];\n    \n//     // Check if there's a possible winning combination with the center piece\n//     if (squares[b] === \"X\") { // If center is occupied by \"X\"\n//       if (squares[a] === \"X\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"X\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     } else if (squares[b] === \"O\") { // If center is occupied by \"O\"\n//       if (squares[a] === \"O\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"O\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     }\n//   }\n//   return false; \n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //checks is all Xs or all Os\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}