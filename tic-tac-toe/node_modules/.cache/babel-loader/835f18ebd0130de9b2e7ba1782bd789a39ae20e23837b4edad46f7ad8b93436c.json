{"ast":null,"code":"var _jsxFileName = \"/Users/cocoli/Desktop/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n// Chorus Lapilli\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nexport default function Board() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xFirst, setXFirst] = useState(0);\n  const [oFirst, setOFirst] = useState(0);\n  const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n  const [oCount, setOCount] = useState(0); //need to create states because the variables \n  const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n  const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n  const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n  //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n  function handleClick(i) {\n    // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n    //   return;\n    // }\n\n    if (calculateWinner(squares)) {\n      //returns early if there is something on that square \n      return;\n    }\n    const nextSquares = squares.slice(); //copy of actuals squares array\n\n    if (xIsNext) {\n      //x's turn\n      if (xFirst === 3 && xCount == 3 && moveSecond == null) {\n        //on first move\n        setprevXIndex(i);\n        setMoveSecond(true);\n        setXCount(2); //only 2 pieces now\n      } else if (xFirst === 3 && xCount == 2 && moveSecond) {\n        //second move\n        console.log(\"CURR:\", xCount);\n        let validity = isValidMove(prevXIndex, i, squares); //check to see if the second move is valid\n        if (centerSpot(prevXIndex, squares, xCount)) {\n          //can win the center spot\n          nextSquares[i] = \"X\"; //marking new location\n          setSquares(nextSquares); //set to the new board\n          setXCount(3); //3 pieces again\n          setMoveSecond(null);\n        }\n        if (validity) {\n          //second move is valid ; also removes the center piece if center can win\n          nextSquares[prevXIndex] = null; //reset the previous position \n          nextSquares[i] = \"X\"; //marking new location\n          setMoveSecond(null); //no longer in second move, reset\n          setXIsNext(!xIsNext); //next person's turn\n          setSquares(nextSquares); //set to the new board\n          setXCount(3); //3 pieces again\n        } else {\n          return;\n        } //choose another move that is valid\n      } else {\n        //has not reached 3 Xs --> only handle one click\n        if (xFirst < 3) {\n          nextSquares[i] = \"X\";\n          setXFirst(xFirst + 1);\n          setSquares(nextSquares); //set to new board\n          setXIsNext(!xIsNext); //change the turn\n        } else {\n          setXCount(3); //finished first 3 moves\n        }\n      }\n    } else {\n      //O's turn \n\n      if (oFirst === 3 && oCount == 3 && moveSecond == null) {\n        //on first move\n        setprevOIndex(i);\n        setMoveSecond(true);\n        setOCount(2);\n      } else if (oFirst === 3 && oCount == 2 && moveSecond) {\n        //second move\n        let validity = isValidMove(prevOIndex, i, squares); //check to see if the second move is valid\n        if (centerSpot(prevOIndex, squares, oCount)) {\n          //can win the center spot\n          nextSquares[i] = \"O\"; //marking new location\n          setSquares(nextSquares); //set to the new board\n          setOCount(3);\n          setMoveSecond(null);\n        } else if (validity) {\n          //second move is valid ; also removes the center piece if center can win\n          nextSquares[prevOIndex] = null; //reset the previous position \n          nextSquares[i] = \"O\"; //marking new location\n          setMoveSecond(null); //no longer in second move, reset\n          setXIsNext(!xIsNext); //next person's turn\n          setSquares(nextSquares); //set to the new board\n          setOCount(3);\n        } else {\n          return;\n        } //choose another move that is valid\n      } else {\n        //has not reached 3 Xs --> only handle one click\n        if (oFirst < 3) {\n          nextSquares[i] = \"O\";\n          setOFirst(oFirst + 1);\n          setSquares(nextSquares); //set to new board\n          setXIsNext(!xIsNext); //change the turn\n        } else {\n          setXCount(3); //finished first 3 moves\n        }\n      }\n    }\n  } //end of handleClick\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"Zp/EpFWe6QgtrFRq8fJB+xU226M=\");\n_c2 = Board;\nfunction isValidMove(currIndex, moveIndex, squares) {\n  //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves = {\n    // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0: [1, 3, 4],\n    1: [0, 2, 3, 4, 5],\n    2: [1, 4, 5],\n    3: [0, 1, 4, 6, 7],\n    4: [0, 1, 2, 3, 5, 6, 7, 8],\n    5: [1, 2, 4, 7, 8],\n    6: [3, 4, 7],\n    7: [3, 4, 5, 6, 8],\n    8: [4, 5, 7]\n  };\n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  if (check) {\n    //check to see if the moveIndex is available \n    if (squares[moveIndex] == null) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    //return false because the square they chose is not valid \n    return false;\n  }\n}\nfunction centerSpot(centIndex, squares, pieces) {\n  if (centIndex === 4 && pieces == 2) {\n    const centerWin = [[3, 4, 5],\n    //middle row\n    [1, 4, 7],\n    //middle column\n    [0, 4, 8],\n    //diagonal (top-left to bottom-right)\n    [2, 4, 6] //diagonal (top-right to bottom-left)\n    ];\n    for (let j = 0; j < centerWin.length; j++) {\n      const [a, b, c] = centerWin[j];\n      if (squares[a] && squares[a] === squares[b] && squares[c] === null) {\n        //checks if a space is open, note b is the center \n        return true;\n      } else if (squares[a] === null && squares[b] === squares[c] && squares[c]) {\n        //checks if a space is open, note b is the center\n        return true;\n      }\n    }\n    return false;\n  }\n  return false;\n}\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2],\n  //top row\n  [3, 4, 5],\n  //middle row\n  [6, 7, 8],\n  //bottom row\n  [0, 3, 6],\n  //left column\n  [1, 4, 7],\n  //middle column\n  [2, 5, 8],\n  //right column\n  [0, 4, 8],\n  //diagonal (top-left to bottom-right)\n  [2, 4, 6] //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      //checks is all Xs or all Os\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","xFirst","setXFirst","oFirst","setOFirst","xCount","setXCount","oCount","setOCount","moveSecond","setMoveSecond","prevXIndex","setprevXIndex","prevOIndex","setprevOIndex","handleClick","i","calculateWinner","nextSquares","slice","console","log","validity","isValidMove","centerSpot","winner","status","_c2","currIndex","moveIndex","possibleMoves","check","includes","centIndex","pieces","centerWin","j","length","a","b","c","lines","$RefreshReg$"],"sources":["/Users/cocoli/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["// Chorus Lapilli\n\nimport { useState } from 'react';\n\nfunction Square({value ,onSquareClick}) {\n  return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xFirst, setXFirst] = useState(0);\n  const [oFirst, setOFirst] = useState(0);\n  const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n  const [oCount, setOCount] = useState(0); //need to create states because the variables \n  const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n  const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n  const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n  //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n  function handleClick(i) {\n\n    // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n    //   return;\n    // }\n\n    if (calculateWinner(squares)) { //returns early if there is something on that square \n        return;\n    }\n\n    const nextSquares = squares.slice(); //copy of actuals squares array\n\n    if (xIsNext) { //x's turn\n      if (xFirst === 3 && xCount == 3 && moveSecond == null){ //on first move\n        setprevXIndex(i)\n        setMoveSecond(true)\n        setXCount(2) //only 2 pieces now\n      }\n      else if(xFirst === 3 && xCount == 2 && moveSecond){ //second move\n          console.log(\"CURR:\", xCount)\n          let validity = isValidMove(prevXIndex,i,squares) //check to see if the second move is valid\n          if (centerSpot(prevXIndex,squares,xCount)){  //can win the center spot\n            nextSquares[i] = \"X\" //marking new location\n            setSquares(nextSquares) //set to the new board\n            setXCount(3) //3 pieces again\n            setMoveSecond(null)\n          }\n          if (validity){   //second move is valid ; also removes the center piece if center can win\n            nextSquares[prevXIndex] = null //reset the previous position \n            nextSquares[i] = \"X\" //marking new location\n            setMoveSecond(null) //no longer in second move, reset\n            setXIsNext(!xIsNext) //next person's turn\n            setSquares(nextSquares); //set to the new board\n            setXCount(3) //3 pieces again\n          }        \n          else{return;} //choose another move that is valid\n      }\n      else{ //has not reached 3 Xs --> only handle one click\n        if (xFirst < 3){\n        nextSquares[i] = \"X\"\n        setXFirst(xFirst + 1) \n        setSquares(nextSquares); //set to new board\n        setXIsNext(!xIsNext); //change the turn\n        }\n        else{\n          setXCount(3) //finished first 3 moves\n        }\n      }\n    } else { //O's turn \n\n      if (oFirst === 3 && oCount == 3 && moveSecond == null){ //on first move\n        setprevOIndex(i)\n        setMoveSecond(true)\n        setOCount(2)\n      }\n      else if(oFirst === 3 && oCount == 2 && moveSecond){ //second move\n          let validity = isValidMove(prevOIndex,i,squares) //check to see if the second move is valid\n          if (centerSpot(prevOIndex,squares,oCount)){  //can win the center spot\n            nextSquares[i] = \"O\" //marking new location\n            setSquares(nextSquares); //set to the new board\n            setOCount(3)\n            setMoveSecond(null)\n          }\n          else if (validity){   //second move is valid ; also removes the center piece if center can win\n            nextSquares[prevOIndex] = null //reset the previous position \n            nextSquares[i] = \"O\" //marking new location\n            setMoveSecond(null) //no longer in second move, reset\n            setXIsNext(!xIsNext) //next person's turn\n            setSquares(nextSquares); //set to the new board\n            setOCount(3)\n          }        \n          else{return;} //choose another move that is valid\n      }\n      else{ //has not reached 3 Xs --> only handle one click\n        if (oFirst < 3){\n          nextSquares[i] = \"O\"\n          setOFirst(oFirst + 1) \n          setSquares(nextSquares); //set to new board\n          setXIsNext(!xIsNext); //change the turn\n        }\n        else{\n          setXCount(3) //finished first 3 moves\n        }\n      }\n    }\n  } //end of handleClick\n\n  const winner = calculateWinner(squares); \n  let status; \n  if (winner) {\n    status = \"Winner: \" + winner;\n  } \n  else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0:[1,3,4],\n    1:[0,2,3,4,5],\n    2:[1,4,5],\n    3:[0,1,4,6,7],\n    4:[0,1,2,3,5,6,7,8],\n    5:[1,2,4,7,8],\n    6:[3,4,7],\n    7:[3,4,5,6,8],\n    8:[4,5,7]\n  }; \n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  if (check){ //check to see if the moveIndex is available \n    if (squares[moveIndex] == null){\n      return true\n    }\n    else{\n      return false\n    }\n  }\n  else{ //return false because the square they chose is not valid \n    return false\n  }\n}\n\nfunction centerSpot (centIndex,squares,pieces){\n  if (centIndex === 4 && pieces == 2){\n    const centerWin = [\n      [3, 4, 5],  //middle row\n      [1, 4, 7],  //middle column\n      [0, 4, 8],  //diagonal (top-left to bottom-right)\n      [2, 4, 6]   //diagonal (top-right to bottom-left)\n    ]\n  \n    for (let j = 0; j < centerWin.length; j++){\n      const [a, b, c] = centerWin[j];\n      if (squares[a] && squares[a] === squares[b] && squares[c] === null) { //checks if a space is open, note b is the center \n        return true;\n      }\n      else if (squares[a] === null && squares[b] === squares[c] && squares[c]) { //checks if a space is open, note b is the center\n        return true;\n      } \n    }\n    return false; \n  }\n  return false;\n}\n\nfunction calculateWinner (squares) {\n  const lines = [\n    [0, 1, 2],  //top row\n    [3, 4, 5],  //middle row\n    [6, 7, 8],  //bottom row\n    [0, 3, 6],  //left column\n    [1, 4, 7],  //middle column\n    [2, 5, 8],  //right column\n    [0, 4, 8],  //diagonal (top-left to bottom-right)\n    [2, 4, 6]   //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //checks is all Xs or all Os\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}