{"ast":null,"code":"var _jsxFileName = \"/Users/cocoli/Desktop/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n// Chorus Lapilli\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nexport default function Board() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [pieceMove, setpieceMove] = useState(null); //piece we want to move \n\n  let xCount = 0;\n  let oCount = 0;\n  for (let i = 0; i < squares.length; i++) {\n    //checks to see how many pieces are on the board \n    if (squares[i] == \"X\") {\n      xCount++;\n    } else if (squares[i] == \"O\") {\n      oCount++;\n    }\n  }\n  function handleClick(i) {\n    if (calculateWinner(squares)) {\n      //returns early if there is something on that square \n      return;\n    }\n    const nextSquares = squares.splice();\n\n    // if (xCount === 3 && xIsNext){\n    //   if (squares[i] == \"X\"){\n    //     setpieceMove(i) //first click\n    //   }\n    //   if (isValidMove(pieceMove,i,nextSquares)){ //second click\n    //     nextSquares[pieceMove] == null\n    //     nextSquares[i] == \"X\"\n    //     setpieceMove(null)\n    //     setSquares(nextSquares)\n    //     setXIsNext(!xIsNext)\n    //   }\n    //   return\n    // }\n\n    // if (oCount === 3 && xIsNext){\n    //   if (squares[i] == \"O\"){\n    //     setpieceMove(i) //first click\n    //   }\n    //   if (isValidMove(pieceMove,i,nextSquares)){ //second click\n    //     nextSquares[pieceMove] == null\n    //     nextSquares[i] == \"O\"\n    //     setpieceMove(null)\n    //     setSquares(nextSquares)\n    //     setXIsNext(!xIsNext)\n    //   }\n    //   return\n    // }\n\n    if (squares[i]) {\n      return;\n    }\n\n    //tic-tac-toes implementation\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"Jhkl8v8fMuNEfnGEi0has+o2/8g=\");\n_c2 = Board;\nfunction isValidMove(currIndex, moveIndex, squares) {\n  //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves = {\n    // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0: [1, 3, 4],\n    1: [0, 2, 3, 4, 5],\n    2: [1, 4, 5],\n    3: [0, 1, 4, 6, 7],\n    4: [0, 1, 2, 3, 5, 6, 7, 8],\n    5: [1, 2, 4, 7, 8],\n    6: [3, 4, 7],\n    7: [3, 4, 5, 6, 8],\n    8: [4, 5, 7]\n  };\n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  //calculate winner for center\n  if (check) {\n    //check to see if the moveIndex is available \n    if (squares[moveIndex] == null) {\n      console.log(\"returned true\");\n      return true;\n    } else {\n      //something occupies\n      console.log(\"returned false\");\n      return false;\n    }\n  } else {\n    //return false because the square they chose is not valid \n    console.log(\"returned false\");\n    return false;\n  }\n}\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2],\n  //top row\n  [3, 4, 5],\n  //middle row\n  [6, 7, 8],\n  //bottom row\n  [0, 3, 6],\n  //left column\n  [1, 4, 7],\n  //middle column\n  [2, 5, 8],\n  //right column\n  [0, 4, 8],\n  //diagonal (top-left to bottom-right)\n  [2, 4, 6] //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// Chorus Lapilli\n\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n//   const [xFirst, setXFirst] = useState(0);\n//   const [oFirst, setOFirst] = useState(0);\n//   const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n//   const [oCount, setOCount] = useState(0); //need to create states because the variables \n//   const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n//   const [cent,setCent] = useState(null); //if can't win this helps with making the person move from the center\n//   // const [oCent,setOCent] = useState(null); //if can't win this helps with making the person move from the center\n//   const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n//   const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n//   //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n//   function handleClick(i) {\n\n//     // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//     //   return;\n//     // }\n\n//     if (calculateWinner(squares)) { //returns early if there is something on that square \n//         return;\n//     }\n\n//     const nextSquares = squares.slice(); //copy of actuals squares array\n\n//     if (xIsNext) { //x's turn\n//       if (xFirst === 3 && xCount == 3 && moveSecond == null){ //on first move\n//         if (nextSquares[4] == \"X\"){\n//           // setprevXIndex(4)\n//           setMoveSecond(true)\n//           setXCount(2)\n//         }\n//         else{\n//           setprevXIndex(i)\n//           setMoveSecond(true)\n//           setXCount(2) //only 2 pieces now\n//           console.log(\"first move, xcount:\", xCount)\n//         }\n//       }\n//       else if(xFirst === 3 && xCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevXIndex,i,squares) //check to see if the second move is valid\n//           // if (centerSpot(prevXIndex,squares)){  //can win the center spot\n//           //   nextSquares[i] = \"X\" //marking new location\n//           //   setSquares(nextSquares) //set to the new board\n//           //   setXCount(3) //3 pieces again\n//           //   setMoveSecond(null)\n//           //   console.log(\"second move but center, xcount:\", xCount)\n//           // }\n\n//           if(nextSquares[4] == \"X\"){\n//             nextSquares[i] == \"X\"\n//             if(calculateWinner(nextSquares)){\n//               setSquares(nextSquares)\n//               setXIsNext(!xIsNext)\n//               console.log(\"I Just Won as X\")\n//             }\n//             else{\n//               setCent(true) //move the center piece \n//               setXCount(3)\n//               setMoveSecond(null)\n//             }\n//           }\n\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevXIndex] = null //reset the previous position \n//             nextSquares[i] = \"X\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setXCount(3) //3 pieces again\n//             console.log(\"second move, xcount:\", xCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Xs --> only handle one click\n//         if (xFirst == 2){ //reached the third try\n//           console.log (\"JUST SET X COUNT!\", xCount)\n//           setXCount(3)\n//         }\n//         nextSquares[i] = \"X\"\n//         setXFirst(xFirst + 1) \n//         console.log(\"Before xFirst\", xFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     } else { //O's turn \n\n//       if (oFirst === 3 && oCount == 3 && moveSecond == null){ //on first move\n//         setprevOIndex(i)\n//         setMoveSecond(true)\n//         setOCount(2)\n//         console.log(\"first move, ocount:\", oCount)\n//       }\n//       else if(oFirst === 3 && oCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevOIndex,i,squares) //check to see if the second move is valid\n//           if (centerSpot(prevOIndex,squares)){  //can win the center spot\n//             nextSquares[i] = \"O\" //marking new location\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             setMoveSecond(null)\n//             console.log(\"second move but center, ocount:\", oCount)\n//           }\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevOIndex] = null //reset the previous position \n//             nextSquares[i] = \"O\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             console.log(\"second move ocount:\", oCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Os --> only handle one click\n//         if (oFirst == 2){ //reached the third try\n//           setOCount(3)\n//           console.log (\"JUST SET oCOUNT!\", oCount)\n//         }\n//         nextSquares[i] = \"O\"\n//         setOFirst(oFirst + 1) \n//         console.log(\"Before oFirst\", oFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     }\n//   } //end of handleClick\n\n//   const winner = calculateWinner(squares); \n//   let status; \n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } \n//   else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n//   const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n//     0:[1,3,4],\n//     1:[0,2,3,4,5],\n//     2:[1,4,5],\n//     3:[0,1,4,6,7],\n//     4:[0,1,2,3,5,6,7,8],\n//     5:[1,2,4,7,8],\n//     6:[3,4,7],\n//     7:[3,4,5,6,8],\n//     8:[4,5,7]\n//   }; \n//   let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n//   if (check){ //check to see if the moveIndex is available \n//     if (squares[moveIndex] == null){\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   else{ //return false because the square they chose is not valid \n//     return false\n//   }\n// }\n\n// function centerSpot (squares) {\n//   const centerWin = [\n//     [3, 4, 5],  // middle row\n//     [1, 4, 7],  // middle column\n//     [0, 4, 8],  // diagonal (top-left to bottom-right)\n//     [2, 4, 6]   // diagonal (top-right to bottom-left)\n//   ];\n\n//   for (let j = 0; j < centerWin.length; j++) {\n//     const [a, b, c] = centerWin[j];\n\n//     // Check if there's a possible winning combination with the center piece\n//     if (squares[b] === \"X\") { // If center is occupied by \"X\"\n//       if (squares[a] === \"X\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"X\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     } else if (squares[b] === \"O\") { // If center is occupied by \"O\"\n//       if (squares[a] === \"O\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"O\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     }\n//   }\n//   return false; \n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //checks is all Xs or all Os\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","xIsNext","setXIsNext","squares","setSquares","Array","fill","pieceMove","setpieceMove","xCount","oCount","i","length","handleClick","calculateWinner","nextSquares","splice","winner","status","_c2","isValidMove","currIndex","moveIndex","possibleMoves","check","includes","console","log","lines","a","b","c","$RefreshReg$"],"sources":["/Users/cocoli/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["// Chorus Lapilli\n\nimport { useState } from 'react';\n\nfunction Square({value ,onSquareClick}) {\n  return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n}\n\nexport default function Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [pieceMove, setpieceMove] = useState(null); //piece we want to move \n\n  let xCount = 0;\n  let oCount = 0;\n  for (let i = 0; i < squares.length; i++){ //checks to see how many pieces are on the board \n    if (squares[i] == \"X\"){\n      xCount++\n    }\n    else if (squares[i] == \"O\"){\n      oCount++\n    }\n  }\n\n  function handleClick(i) {\n    if (calculateWinner(squares)) { //returns early if there is something on that square \n      return;\n    }\n    \n    const nextSquares = squares.splice()\n\n    // if (xCount === 3 && xIsNext){\n    //   if (squares[i] == \"X\"){\n    //     setpieceMove(i) //first click\n    //   }\n    //   if (isValidMove(pieceMove,i,nextSquares)){ //second click\n    //     nextSquares[pieceMove] == null\n    //     nextSquares[i] == \"X\"\n    //     setpieceMove(null)\n    //     setSquares(nextSquares)\n    //     setXIsNext(!xIsNext)\n    //   }\n    //   return\n    // }\n\n    // if (oCount === 3 && xIsNext){\n    //   if (squares[i] == \"O\"){\n    //     setpieceMove(i) //first click\n    //   }\n    //   if (isValidMove(pieceMove,i,nextSquares)){ //second click\n    //     nextSquares[pieceMove] == null\n    //     nextSquares[i] == \"O\"\n    //     setpieceMove(null)\n    //     setSquares(nextSquares)\n    //     setXIsNext(!xIsNext)\n    //   }\n    //   return\n    // }\n\n    if (squares[i]){\n      return; \n    }\n\n    //tic-tac-toes implementation\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    \n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\nfunction isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n  const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n    0:[1,3,4],\n    1:[0,2,3,4,5],\n    2:[1,4,5],\n    3:[0,1,4,6,7],\n    4:[0,1,2,3,5,6,7,8],\n    5:[1,2,4,7,8],\n    6:[3,4,7],\n    7:[3,4,5,6,8],\n    8:[4,5,7]\n  }; \n  let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n  //calculate winner for center\n  if (check){ //check to see if the moveIndex is available \n    if (squares[moveIndex] == null){\n      console.log(\"returned true\")\n      return true\n    }\n    else{ //something occupies\n      console.log(\"returned false\")\n      return false\n    }\n    \n  }\n  else{ //return false because the square they chose is not valid \n    console.log(\"returned false\")\n    return false\n  }\n}\n\nfunction calculateWinner (squares) {\n  const lines = [\n    [0, 1, 2],  //top row\n    [3, 4, 5],  //middle row\n    [6, 7, 8],  //bottom row\n    [0, 3, 6],  //left column\n    [1, 4, 7],  //middle column\n    [2, 5, 8],  //right column\n    [0, 4, 8],  //diagonal (top-left to bottom-right)\n    [2, 4, 6]   //diagonal (top-right to bottom-left)\n  ]; //refers to the possibilities of where a winner can win\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n// Chorus Lapilli\n\n// import { useState } from 'react';\n\n// function Square({value ,onSquareClick}) {\n//   return <button className=\"square\" onClick = {onSquareClick}>{value}</button>;\n// }\n\n// export default function Board() {\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [squares, setSquares] = useState(Array(9).fill(null));\n//   const [xFirst, setXFirst] = useState(0);\n//   const [oFirst, setOFirst] = useState(0);\n//   const [xCount, setXCount] = useState(0); //creating states for the variables xCount and oCount to count how many Xs and Os on the b\n//   const [oCount, setOCount] = useState(0); //need to create states because the variables \n//   const [moveSecond, setMoveSecond] = useState(null); //checks to see if on second move\n//   const [cent,setCent] = useState(null); //if can't win this helps with making the person move from the center\n//   // const [oCent,setOCent] = useState(null); //if can't win this helps with making the person move from the center\n//   const [prevXIndex, setprevXIndex] = useState(0); //keeps track of X's first moves\n//   const [prevOIndex, setprevOIndex] = useState(0); //keeps track of Y's first moves\n\n//   //NEED TO IMPLEMENT after the first click, going onto second before it is the next players turn  --> that is need to let them go twice\n\n//   function handleClick(i) {\n\n//     // if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square \n//     //   return;\n//     // }\n\n//     if (calculateWinner(squares)) { //returns early if there is something on that square \n//         return;\n//     }\n\n//     const nextSquares = squares.slice(); //copy of actuals squares array\n\n//     if (xIsNext) { //x's turn\n//       if (xFirst === 3 && xCount == 3 && moveSecond == null){ //on first move\n//         if (nextSquares[4] == \"X\"){\n//           // setprevXIndex(4)\n//           setMoveSecond(true)\n//           setXCount(2)\n//         }\n//         else{\n//           setprevXIndex(i)\n//           setMoveSecond(true)\n//           setXCount(2) //only 2 pieces now\n//           console.log(\"first move, xcount:\", xCount)\n//         }\n//       }\n//       else if(xFirst === 3 && xCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevXIndex,i,squares) //check to see if the second move is valid\n//           // if (centerSpot(prevXIndex,squares)){  //can win the center spot\n//           //   nextSquares[i] = \"X\" //marking new location\n//           //   setSquares(nextSquares) //set to the new board\n//           //   setXCount(3) //3 pieces again\n//           //   setMoveSecond(null)\n//           //   console.log(\"second move but center, xcount:\", xCount)\n//           // }\n\n//           if(nextSquares[4] == \"X\"){\n//             nextSquares[i] == \"X\"\n//             if(calculateWinner(nextSquares)){\n//               setSquares(nextSquares)\n//               setXIsNext(!xIsNext)\n//               console.log(\"I Just Won as X\")\n//             }\n//             else{\n//               setCent(true) //move the center piece \n//               setXCount(3)\n//               setMoveSecond(null)\n//             }\n//           }\n\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevXIndex] = null //reset the previous position \n//             nextSquares[i] = \"X\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setXCount(3) //3 pieces again\n//             console.log(\"second move, xcount:\", xCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Xs --> only handle one click\n//         if (xFirst == 2){ //reached the third try\n//           console.log (\"JUST SET X COUNT!\", xCount)\n//           setXCount(3)\n//         }\n//         nextSquares[i] = \"X\"\n//         setXFirst(xFirst + 1) \n//         console.log(\"Before xFirst\", xFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     } else { //O's turn \n\n//       if (oFirst === 3 && oCount == 3 && moveSecond == null){ //on first move\n//         setprevOIndex(i)\n//         setMoveSecond(true)\n//         setOCount(2)\n//         console.log(\"first move, ocount:\", oCount)\n//       }\n//       else if(oFirst === 3 && oCount == 2 && moveSecond){ //second move\n//           let validity = isValidMove(prevOIndex,i,squares) //check to see if the second move is valid\n//           if (centerSpot(prevOIndex,squares)){  //can win the center spot\n//             nextSquares[i] = \"O\" //marking new location\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             setMoveSecond(null)\n//             console.log(\"second move but center, ocount:\", oCount)\n//           }\n//           else if (validity){   //second move is valid ; also removes the center piece if center can win\n//             nextSquares[prevOIndex] = null //reset the previous position \n//             nextSquares[i] = \"O\" //marking new location\n//             setMoveSecond(null) //no longer in second move, reset\n//             setXIsNext(!xIsNext) //next person's turn\n//             setSquares(nextSquares); //set to the new board\n//             setOCount(3)\n//             console.log(\"second move ocount:\", oCount)\n//           }        \n//           else{return;} //choose another move that is valid\n//       }\n//       else{ //has not reached 3 Os --> only handle one click\n//         if (oFirst == 2){ //reached the third try\n//           setOCount(3)\n//           console.log (\"JUST SET oCOUNT!\", oCount)\n//         }\n//         nextSquares[i] = \"O\"\n//         setOFirst(oFirst + 1) \n//         console.log(\"Before oFirst\", oFirst)\n//         setSquares(nextSquares); //set to new board\n//         setXIsNext(!xIsNext); //change the turn\n//       }\n//     }\n//   } //end of handleClick\n\n//   const winner = calculateWinner(squares); \n//   let status; \n//   if (winner) {\n//     status = \"Winner: \" + winner;\n//   } \n//   else {\n//     status = \"Next player: \" + (xIsNext ? \"X\" : \"O\"); //if xIsNext , next player is X, else it is O\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// function isValidMove (currIndex,moveIndex,squares){ //checks to see if the second move is a valid move --> call this function on the second click\n//   const possibleMoves ={ // 0:,1:....8: are the keys --> possible moves are the indexs in the list \n//     0:[1,3,4],\n//     1:[0,2,3,4,5],\n//     2:[1,4,5],\n//     3:[0,1,4,6,7],\n//     4:[0,1,2,3,5,6,7,8],\n//     5:[1,2,4,7,8],\n//     6:[3,4,7],\n//     7:[3,4,5,6,8],\n//     8:[4,5,7]\n//   }; \n//   let check = possibleMoves[currIndex].includes(moveIndex); //finds the key of curr index, then checks to see if the index they want to move to is a valid box from that curr index\n//   if (check){ //check to see if the moveIndex is available \n//     if (squares[moveIndex] == null){\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   else{ //return false because the square they chose is not valid \n//     return false\n//   }\n// }\n\n// function centerSpot (squares) {\n//   const centerWin = [\n//     [3, 4, 5],  // middle row\n//     [1, 4, 7],  // middle column\n//     [0, 4, 8],  // diagonal (top-left to bottom-right)\n//     [2, 4, 6]   // diagonal (top-right to bottom-left)\n//   ];\n\n//   for (let j = 0; j < centerWin.length; j++) {\n//     const [a, b, c] = centerWin[j];\n    \n//     // Check if there's a possible winning combination with the center piece\n//     if (squares[b] === \"X\") { // If center is occupied by \"X\"\n//       if (squares[a] === \"X\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"X\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     } else if (squares[b] === \"O\") { // If center is occupied by \"O\"\n//       if (squares[a] === \"O\" && squares[c] === null) {\n//         return true; // Can win by placing in c\n//       }\n//       if (squares[c] === \"O\" && squares[a] === null) {\n//         return true; // Can win by placing in a\n//       }\n//     }\n//   }\n//   return false; \n// }\n\n// function calculateWinner (squares) {\n//   const lines = [\n//     [0, 1, 2],  //top row\n//     [3, 4, 5],  //middle row\n//     [6, 7, 8],  //bottom row\n//     [0, 3, 6],  //left column\n//     [1, 4, 7],  //middle column\n//     [2, 5, 8],  //right column\n//     [0, 4, 8],  //diagonal (top-left to bottom-right)\n//     [2, 4, 6]   //diagonal (top-right to bottom-left)\n//   ]; //refers to the possibilities of where a winner can win\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //checks is all Xs or all Os\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}