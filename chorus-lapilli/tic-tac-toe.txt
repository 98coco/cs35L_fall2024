1) Setup on a local environment 
    a. npm install
    b. npm start 
    Result: Packages and code on local environment
2) App.js contains the code for components. Components is reusable code that represents parts of our UI
    Code:
        export default function Square() {
            return <button className="square">X</button>;
        }
    Breakdown: 
        a. function Square --> defines square function
        b. export allows the function to run outside of file
        c. default --> tells other files using your code that it is the main function
        d. <button> is a JSX element 
            i. A JSX element is a combionation of Javascript code and HTML tags 
            ii. JSX allows us to combine Javascript and HTML. Makes it easier for web design, especially when 
                starting more complext designs. 
                E.g., In the above example, we are using javascript syntax for our code that thens return and HTML tag. 
                In our index.js file, we will call our App.Js and it will run the default function we have, which is Square.

                Note: Once rendering, all this code will turn into JS, HTML, CSS 
                    e.g, className will be seen as class for HTML

        e. className tells us how to style the button (We want it in the format of a square). 
        d. X is what goes into the square

3) styles.css contains the styling for our project.
    Key parts so far:
        * { box-sizing: border-box;}
        
        body {
            font-family: sans-serif;
            margin: 20px;
            padding: 0;
        }
    Breakdown of styles.css file:
        a. First two CSS selectors are * and body. This targets the larger parts of our application
        b. .square selector styles components that is has a className of square

4) index.js is the bridge between the components you create in app.js and the web browser
    Breakdown:
    import React, { StrictMode } from "react"; // React 
    import { createRoot } from "react-dom/client"; //React's library that allows you to connect with web browsers (React DOM)
    import "./styles.css"; // styles for components in app.js
    
    import App from "./App"; //components you created in App.js

5) Building our board

    Goal: Create more boxes since we only have one right now. 
    
    Error:
    export default function Square() {
        return <button className="square">X</button><button className="square">X</button>;
    }
    The above raises and error because React components can only return a SINGLE JSX element not multiple adjacent elements.
    To fix we can use a fragment tag: <> </>

    Our Code now looks like this:

    export default function Square() {
        return(
            <> //This is one single JSX component
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            </>
        )
    }

    When adding more boxes... 

     export default function Square() {
        return(
            <> //This is one single JSX component
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            <button className ="square"> x </button>
            </>
        )
    }

    --> This will give use a straight line of 9 boxes rather than rows. 
        To create rows, we can create a div and use a className for board rows.

        export default function Board() {
            return(
                <> //This is one single JSX component
                <div className = "board-row"> 
                    <button className ="square"> 1 </button>
                    <button className ="square"> 2 </button>
                    <button className ="square"> 3 </button>
                </div>

                <div className = "board-row"> 
                    <button className ="square"> 4 </button>
                    <button className ="square"> 5 </button>
                    <button className ="square"> 6 </button>
                </div>

                <div className = "board-row"> 
                    <button className ="square"> 7 </button>
                    <button className ="square"> 8 </button>
                    <button className ="square"> 9 </button>
                </div>
                </>
            );
        }

        --> Gives us 3 rows with three boxes 
        --> Changed the name 'Square' to 'Board' because our result is no longer a square. It is our tic-tac-toe board.
        --> Downside of this code: we have duplicate code. We can reduce this duplication of code through React since React allows us to create components to avoid this 

6) Passing data through props
   Main idea: Props stand for properties. Parent components can pass information to their child components through props. 
              This allows for communication between components and allows the child to access and display data given by the parent. 
    Goal: When user clicks on an empty box, we get an X

    Create one square component by creating a square function that return the button tag.
    We add the following function to our App.js file:
        function Square() {
            return <button className="square">1</button>;
        }
    
    We can call this function within out board function and get: 

    export default function Board() {
        return(
            <>
                <div className = "board-row ">
                    <Square/>
                    <Square/>
                    <Square/>
                </div>
                <div className = "board-row">
                    <Square/>
                    <Square/>
                    <Square/>
                </div>
                <div className = "board-row">
                    <Square/>
                    <Square/>
                    <Square/>
                </div>
            </>
        );
    }

    --> This gives us a board with all 1s.
    --> Downside: Our board only contains 1s and lost the numbering we had for squares initially
    --> Fix: By using props to pass values to each square
    --> right now the code above: parent is the board, child is the square

    function Square({value}) {
        return <button className="square">value</button>;
    }

    --> Using props to pass a value being inputted and display this value instead of 1
    --> Result: Our board now contains the word value instead of the Javascript variable 'value'

      function Square({value}) {
        return <button className="square"> {value}</button>;
    }

    --> Now takes in the variable value instead of the word value.
    --> However, we have an empty board because our Board (the parent) has not passed in a value to Square (our child)

     To fix we pass the value from the parent, Board, to the child, square:

    export default function Board() {
        return (
            <>
            <div className="board-row">
                <Square value="1" />
                <Square value="2" />
                <Square value="3" />
            </div>
            <div className="board-row">
                <Square value="4" />
                <Square value="5" />
                <Square value="6" />
            </div>
            <div className="board-row">
                <Square value="7" />
                <Square value="8" />
                <Square value="9" />
            </div>
            </>
        );
    }

    --> passed the values 1,2,3...,9 into each square in our board.

7) Creating an Interactive Component 

    Goal: When we click on a square, we want and X to be in place of it 

    function Square({ value }) {
        function handleClick() {
            console.log('clicked!');
        }
        return (
            <button
            className="square"
            onClick={handleClick}
            >
            {value}
            </button>
        );
    }

    --> Here we define a function called handleClick within the Square function 
    --> Within our button, we implement onClick and pass our function handleClick as the parameter.
    --> In doing so, our code now prints out 'clicked!' everytime we press a box onto the console.

    Utilziing state and turn this into an X rather than numbers:

    import { useState } from 'react';

    function Square() {
        const [value, setValue] = useState(null);

        function handleClick() {
            console.log('clicked!');
        }

        return (
            <button
            className="square"
            onClick={handleClick}
            >
            {value}
            </button>
        );
    }

    export default function Board() {
        return (
            <>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            </>
        );
    }

    --> React uses states to "remember" if things got activated, the function useState does this. Thus, we have to import the useState func from React at the top of the file
    --> In our current code, we make the default of the state be null (not activated)
        --> Note: a state is private to the component that defines that state
    --> const [value, setValue] = useState(null); stores the values after useState is called. value stores the value and setValue is a function that can set the value
        --> Note: The setValue function is what React gives you to update the state.
    --> We removed the value within the Board component because we are no longer passing in the number props

    import { useState } from 'react';

    function Square() {
        const [value, setValue] = useState(null);

        function handleClick() {
            setValue('X');
        }

        return (
            <button
            className="square"
            onClick={handleClick}
            >
            {value}
            </button>
        );
    }

    export default function Board() {
        return (
            ..... everything from before
        );
    }

    --> We change setValue to change the value to X if a square is clicked 
    --> Line of order: call the square function in the board function. When square 
        is called and a square is clicked, we call the function handleClick which sets value variable to X.
        Thus, our box contains an X inside when we click on it.

8) Lifiting state up

   Goal: Get board to know each of the states square component
   Approach: Have the state be stored in the Board component RATHER THAN the square component. 
            We can then use passing through props, like how we did with the numbers, to have the square
            display what we want it to display. This process of switching states from child to parent is
            called refactoring in React.
    
    export default function Board() {
        const [squares, setSquares] = useState(Array(9).fill(null));
        return (
            <>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            <div className="board-row">
                <Square />
                <Square />
                <Square />
            </div>
            </>
        );
    }
    
    --> use an array to store 9 of the values for the states of each square within the parent component
        --> Array(9).fill(null) creates an array of 9 elements and sets those 9 states to null
    --> useState() around it then declares a state variable, squares, that is an array to store those intializations
   
    export default function Board() {
        const [squares, setSquares] = useState(Array(9).fill(null));

        return (
            <>
            <div className="board-row">
                <Square value={squares[0]} />
                <Square value={squares[1]} />
                <Square value={squares[2]} />
            </div>
            <div className="board-row">
                <Square value={squares[3]} />
                <Square value={squares[4]} />
                <Square value={squares[5]} />
            </div>
            <div className="board-row">
                <Square value={squares[6]} />
                <Square value={squares[7]} />
                <Square value={squares[8]} />
            </div>
            </>
        );
    }

    --> Allows for the Board to pass a prop down to the Square 

    function Square({value}) {
        return <button className="square">{value}</button>;
    }

    --> Edited the Square function to RECEIVE the prop that it was passed down
    --> As of right now, one of our problems is that we can't update the Board's 
        state through Square since the state is private to Board

    Approach: Have Board pass down a function to Square. When the button is clicked, then
              Square is able to call this function.
    
    function Square({ value, onSquareClick }) {
        return (
            <button className="square" onClick={onSquareClick}>
            {value}
            </button>
        );
    }

    --> The function being passed down is onSquareClick
    --> The  line onCLick = {onSquareClick} will call onSquareClick when a Square is clicked

    Incorporate the following into our Board function:
    
    --> Turn  <Square value={squares[0]} /> into  <Square value={squares[0]} onSquareClick={handleClick} />
    --> Add the function handleClick into Board function
        --> function handleClick() {
                const nextSquares = squares.slice();
                nextSquares[0] = "X";
                setSquares(nextSquares);
            }

    --> Connect the onSquareClick prop to a function in Board that we will name handleClick
    --> when a square is clicked, it will call the function handleClick in the Board function
    --> Downside of these new additions: Only updates the upper left square when that square is clicked 

    What the handleClick function is doing
       --> creates a copy of the squares array we defined at the beginning of the Board function using 
           JS's slice() array method. This copy of the array is called nextSquares.
       --> updates nextSquares's first element to add an 'X' to it 
       --> since JS supports closure, handleClick has access to all the variables and functions defined       
           in the outer function Board. So, handleClick can read the squares state and call the setSquare 
           method since the two are defined inside of the board function.
           --> closure: inner functions have access to variables and functions in the outer function

    function handleClick(i) {
        const nextSquares = squares.slice();
        nextSquares[i] = "X";
        setSquares(nextSquares);
    }

    --> this new addition allows us to update the square at a given index 

    If you now have the onSquaresClick call the function handleClick in this way:

         <Square value={squares[0]} onSquareClick={handleClick(0)} />
    
    We run into an infinite loop. This is because we already have a parameter passed in, thus calling the function,
    and the state keeps rerendering!

    To fix:
    Turn  <Square value={squares[0]} onSquareClick={handleClick(0)} /> into <Square value={squares[0]} onSquareClick={() => handleClick(0)} />       

    --> () => handleClick(0) is an arrow function (shorter way to define functions)
    --> when square is clicked the function after is called 

        import { useState } from 'react';

        function Square({ value, onSquareClick }) {
        return (
            <button className="square" onClick={onSquareClick}>
            {value}
            </button>
        );
        }

        export default function Board() {
        const [squares, setSquares] = useState(Array(9).fill(null));

        function handleClick(i) {
            const nextSquares = squares.slice();
            nextSquares[i] = 'X';
            setSquares(nextSquares);
        }

        return (
            <>
            <div className="board-row">
                <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
                <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
                <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
            </div>
            <div className="board-row">
                <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
                <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
                <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
            </div>
            <div className="board-row">
                <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
                <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
                <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
            </div>
            </>
        );
        }`

        --> allows us to update the squares with X's when it is clicked by having the Board hold the state functionality 

9) Taking turns:

    function Square({..}){...}

    export default function Board() {
        const [xIsNext, setXIsNext] = useState(true); // NOT AN ARRAY
        const [squares, setSquares] = useState(Array(9).fill(null));
        
        function handleClick(i) {
            if (squares[i]) { //returns early if there is something on that square; knows based on whether or not that state is still null
                return;
            }
            const nextSquares = squares.slice();

            if (xIsNext) {
                nextSquares[i] = "X";
            } else {
                nextSquares[i] = "O";
            }
            setSquares(nextSquares);
            setXIsNext(!xIsNext);  //changes the state after showing X or O
        }
        return(...);
    }

    --> Returns early if we already have an X or an O within that square
    --> create a new state witin the Board function to determine whether X is next 
        --> contains a boolean to check whether X is next 
    --> within the handleClick function, if x
    
10) Declaring a Winner 

    Adding a helper function to declare a winner:

    function calculateWinner (squares) {
        const lines = [
            [0, 1, 2],  //top row
            [3, 4, 5],  //middle row
            [6, 7, 8],  //bottom row
            [0, 3, 6],  //left column
            [1, 4, 7],  //middle column
            [2, 5, 8],  //right column
            [0, 4, 8],  //diagonal (top-left to bottom-right)
            [2, 4, 6]   //diagonal (top-right to bottom-left)
        ]; //refers to the possibilities of where a winner can win

        for (let i = 0; i < lines.length; i++) {
            const [a, b, c] = lines[i];
            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
            return squares[a];
            }
        }
        return null;
    }

    --> Contains possible winning rows, checks if they have the same value, if so return the value X, O, or null

    Update handleClick to return early if we have a winner

    export default function Board() {
    const [xIsNext, setXIsNext] = useState(true);
    const [squares, setSquares] = useState(Array(9).fill(null));

    function handleClick(i) {
            if (squares[i] || calculateWinner(squares)) { //returns early if there is something on that square 
            return;
        }
        .......
    }
       
    --> if either X or O we will enter return early, found a winner!

    Displaying the winner:

    const winner = calculateWinner(squares);
        let status; //creating a new variable in JS
        if (winner) {
            status = "Winner: " + winner;
        } else {
            status = "Next player: " + (xIsNext ? "X" : "O"); //if xIsNext , next player is X, else it is O
    }

        --> New lines of code in our Board function. Allows is to Display the winner
    
    Add 
        <div className="status">{status}</div> to our return block in Board function. 
    
    --> Doing this allows us to display whose turn is next if there is no winner. If there is a winner, it tells us the winner.







Personal Notes: 
-->  Rendering - refers to the process of translating your React components into what you see on the screen which is the UI.
    Note: States are immutable on React. This is due to the rerednering process. Which is why we want to create a new copy
        of things we want to change. The component will then correctly reflects the updated state, and React can efficiently
        re-render only what has changed. Also allows us to resuse data if we need it later on. 
--> console.log() prints the contents within in a paranthesis
    --> On a mac, to see where this is printed we can go on Chrome and type Option + Command + j

